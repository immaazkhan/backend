/* globals before, describe, it */

var assert = require('assert')
var gh = require('..')

describe('github-url-to-object', function () {
  describe('shorthand', function () {
    it('supports user/repo style', function () {
      var obj = gh('user/repo#branch')
      assert.equal(obj.user, 'user')
      assert.equal(obj.repo, 'repo')
    })

    it('supports user/repo#branch style', function () {
      var obj = gh('user/repo#branch')
      assert.equal(obj.user, 'user')
      assert.equal(obj.repo, 'repo')
      assert.equal(obj.branch, 'branch')
    })

    it('defaults to master branch', function () {
      var obj = gh('user/repo')
      assert.equal(obj.user, 'user')
      assert.equal(obj.repo, 'repo')
      assert.equal(obj.branch, 'master')
    })

    it('is not vulnerable to REDOS', function () {
      var prefix = 'a/a'
      var pump = 'a'
      var suffix = 'a/'

      var attackString = prefix
      for (var i = 0; i < 25000; i++) {
        attackString += pump
      }
      attackString += suffix

      console.log('matching')
      var before = process.hrtime()
      var obj = gh(attackString)
      var elapsed = process.hrtime(before)

      // Invalid input so should be rejected...
      assert.equal(obj, null)
      // ...but how quickly?
      assert.equal(elapsed[0], 0)
    })
  })

  describe('mediumhand', function () {
    it('supports github:user/repo style', function () {
      var obj = gh('github:user/repo#branch')
      assert.equal(obj.user, 'user')
      assert.equal(obj.repo, 'repo')
    })

    it('supports github:user/repo#branch style', function () {
      var obj = gh('github:user/repo#branch')
      assert.equal(obj.user, 'user')
      assert.equal(obj.repo, 'repo')
      assert.equal(obj.branch, 'branch')
    })

    it('defaults to master branch', function () {
      var obj = gh('github:user/repo')
      assert.equal(obj.user, 'user')
      assert.equal(obj.repo, 'repo')
      assert.equal(obj.branch, 'master')
    })

    it('rejects bitbucket', function () {
      var obj = gh('bitbucket:user/repo')
      assert.equal(obj, null)
    })

    it('is not vulnerable to REDOS', function () {
      var prefix = 'github:a/a'
      var pump = 'a'
      var suffix = 'ub.:'

      var attackString = prefix
      for (var i = 0; i < 25000; i++) {
        attackString += pump
      }
      attackString += suffix

      var before = process.hrtime()
      var obj = gh(attackString)
      var elapsed = process.hrtime(before)

      // Invalid input so should be rejected...
      assert.equal(obj, null)
      // ...but how quickly?
      assert.equal(elapsed[0], 0)
    })
  })

  describe('oldschool', function () {
    it('supports git@ URLs', function () {
      var obj = gh('git@github.com:heroku/heroku-flags.git')
      assert.equal(obj.user, 'heroku')
      assert.equal(obj.repo, 'heroku-flags')
    })

    it('defaults to master branch for git@ URLs', function () {
      var obj = gh('git@github.com:heroku/heroku-flags.git')
      assert.equal(obj.branch, 'master')
    })

    it('supports git+ssh:// URLs', function () {
      var obj = gh('git+ssh://git@github.com/foo/bar.git')
      assert.equal(obj.user, 'foo')
      assert.equal(obj.repo, 'bar')
    })

    it('supports git+https:// URLs', function () {
      var obj = gh('git+https://github.com/foo/bar.git')
      assert.equal(obj.user, 'foo')
      assert.equal(obj.repo, 'bar')
    })

    it('supports git:// URLs', function () {
      var obj = gh('git://github.com/foo/bar.git')
      assert.equal(obj.user, 'foo')
      assert.equal(obj.repo, 'bar')
    })

    it('defaults to master branch for git:// URLs', function () {
      var obj = gh('git://github.com/foo/bar.git')
      assert.equal(obj.branch, 'master')
    })

    describe('github enterprise', function () {
      it('supports git@ URLs', function () {
        var obj = gh('git@ghe.example.com:heroku/heroku-flags.git', {enterprise: true})
        assert.equal(obj.user, 'heroku')
        assert.equal(obj.repo, 'heroku-flags')
      })

      it('supports git:// URLs', function () {
        var obj = gh('git://ghe.example.com/foo/bar.git', {enterprise: true})
        assert.equal(obj.user, 'foo')
        assert.equal(obj.repo, 'bar')
      })
    })
  })

  describe('repository.url object', function () {
    it('accepts an object with a `url` property; common in package.json files', function () {
      var obj = gh({url: 'http://github.com/zeke/outlet.git', type: 'git'})
      assert.equal(obj.user, 'zeke')
      assert.equal(obj.repo, 'outlet')
    })
  })

  describe('http', function () {
    it('supports http URLs', function () {
      var obj = gh('http://github.com/zeke/outlet.git')
      assert.equal(obj.user, 'zeke')
      assert.equal(obj.repo, 'outlet')
    })

    it('supports https URLs', function () {
      var obj = gh('https://github.com/zeke/outlet.git')
      assert.equal(obj.user, 'zeke')
      assert.equal(obj.repo, 'outlet')
    })

    it('supports URLs with www', function () {
      var obj = gh('https://www.github.com/zeke/outlet')
      assert.equal(obj.user, 'zeke')
      assert.equal(obj.repo, 'outlet')
    })

    it('supports deep URLs', function () {
      var obj = gh('https://github.com/zeke/ruby-rails-sample/blob/b1e1000fedb6ca448dd78702de4fc78dedfee48c/app.json